/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PrivateRouteImport } from './routes/private'
import { Route as AnalyzeRepositoryRouteImport } from './routes/analyze-repository'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LicensesIndexRouteImport } from './routes/licenses/index'
import { Route as BlogIndexRouteImport } from './routes/blog/index'
import { Route as TechTechKeyRouteImport } from './routes/tech/$techKey'
import { Route as LicensesLicenseRouteImport } from './routes/licenses/$license'
import { Route as CategoryCategoryRouteImport } from './routes/category/$category'
import { Route as BlogSlugRouteImport } from './routes/blog/$slug'
import { Route as OrgNameRouteImport } from './routes/$org/$name'

const PrivateRoute = PrivateRouteImport.update({
  id: '/private',
  path: '/private',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyzeRepositoryRoute = AnalyzeRepositoryRouteImport.update({
  id: '/analyze-repository',
  path: '/analyze-repository',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LicensesIndexRoute = LicensesIndexRouteImport.update({
  id: '/licenses/',
  path: '/licenses/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRouteImport,
} as any)
const TechTechKeyRoute = TechTechKeyRouteImport.update({
  id: '/tech/$techKey',
  path: '/tech/$techKey',
  getParentRoute: () => rootRouteImport,
} as any)
const LicensesLicenseRoute = LicensesLicenseRouteImport.update({
  id: '/licenses/$license',
  path: '/licenses/$license',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoryCategoryRoute = CategoryCategoryRouteImport.update({
  id: '/category/$category',
  path: '/category/$category',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const OrgNameRoute = OrgNameRouteImport.update({
  id: '/$org/$name',
  path: '/$org/$name',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/analyze-repository': typeof AnalyzeRepositoryRoute
  '/private': typeof PrivateRoute
  '/$org/$name': typeof OrgNameRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/licenses/$license': typeof LicensesLicenseRoute
  '/tech/$techKey': typeof TechTechKeyRoute
  '/blog': typeof BlogIndexRoute
  '/licenses': typeof LicensesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/analyze-repository': typeof AnalyzeRepositoryRoute
  '/private': typeof PrivateRoute
  '/$org/$name': typeof OrgNameRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/licenses/$license': typeof LicensesLicenseRoute
  '/tech/$techKey': typeof TechTechKeyRoute
  '/blog': typeof BlogIndexRoute
  '/licenses': typeof LicensesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/analyze-repository': typeof AnalyzeRepositoryRoute
  '/private': typeof PrivateRoute
  '/$org/$name': typeof OrgNameRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/licenses/$license': typeof LicensesLicenseRoute
  '/tech/$techKey': typeof TechTechKeyRoute
  '/blog/': typeof BlogIndexRoute
  '/licenses/': typeof LicensesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/analyze-repository'
    | '/private'
    | '/$org/$name'
    | '/blog/$slug'
    | '/category/$category'
    | '/licenses/$license'
    | '/tech/$techKey'
    | '/blog'
    | '/licenses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/analyze-repository'
    | '/private'
    | '/$org/$name'
    | '/blog/$slug'
    | '/category/$category'
    | '/licenses/$license'
    | '/tech/$techKey'
    | '/blog'
    | '/licenses'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/analyze-repository'
    | '/private'
    | '/$org/$name'
    | '/blog/$slug'
    | '/category/$category'
    | '/licenses/$license'
    | '/tech/$techKey'
    | '/blog/'
    | '/licenses/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AnalyzeRepositoryRoute: typeof AnalyzeRepositoryRoute
  PrivateRoute: typeof PrivateRoute
  OrgNameRoute: typeof OrgNameRoute
  BlogSlugRoute: typeof BlogSlugRoute
  CategoryCategoryRoute: typeof CategoryCategoryRoute
  LicensesLicenseRoute: typeof LicensesLicenseRoute
  TechTechKeyRoute: typeof TechTechKeyRoute
  BlogIndexRoute: typeof BlogIndexRoute
  LicensesIndexRoute: typeof LicensesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/private': {
      id: '/private'
      path: '/private'
      fullPath: '/private'
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analyze-repository': {
      id: '/analyze-repository'
      path: '/analyze-repository'
      fullPath: '/analyze-repository'
      preLoaderRoute: typeof AnalyzeRepositoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/licenses/': {
      id: '/licenses/'
      path: '/licenses'
      fullPath: '/licenses'
      preLoaderRoute: typeof LicensesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tech/$techKey': {
      id: '/tech/$techKey'
      path: '/tech/$techKey'
      fullPath: '/tech/$techKey'
      preLoaderRoute: typeof TechTechKeyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/licenses/$license': {
      id: '/licenses/$license'
      path: '/licenses/$license'
      fullPath: '/licenses/$license'
      preLoaderRoute: typeof LicensesLicenseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/category/$category': {
      id: '/category/$category'
      path: '/category/$category'
      fullPath: '/category/$category'
      preLoaderRoute: typeof CategoryCategoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$org/$name': {
      id: '/$org/$name'
      path: '/$org/$name'
      fullPath: '/$org/$name'
      preLoaderRoute: typeof OrgNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AnalyzeRepositoryRoute: AnalyzeRepositoryRoute,
  PrivateRoute: PrivateRoute,
  OrgNameRoute: OrgNameRoute,
  BlogSlugRoute: BlogSlugRoute,
  CategoryCategoryRoute: CategoryCategoryRoute,
  LicensesLicenseRoute: LicensesLicenseRoute,
  TechTechKeyRoute: TechTechKeyRoute,
  BlogIndexRoute: BlogIndexRoute,
  LicensesIndexRoute: LicensesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
